rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion through client
      
      // API Keys subcollection
      match /apiKeys/{keyId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isAuthenticated() && isOwner(userId);
      }
      
      // Chat Sessions subcollection
      match /chatSessions/{sessionId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isAuthenticated() && isOwner(userId);
        
        // Messages subcollection within chat sessions
        match /messages/{messageId} {
          allow read: if isAuthenticated() && isOwner(userId);
          allow write: if isAuthenticated() && isOwner(userId);
        }
      }
    }
    
    // API Logs collection - only backend can write
    match /apiLogs/{logId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow write: if false; // Only allow writes from backend
    }
    
    // Payment Logs collection
    match /paymentLogs/{logId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow write: if false; // Only allow writes from backend
    }
    
    // Usage Summaries collection
    match /usageSummaries/{summaryId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || isAdmin()
      );
      allow write: if false; // Only allow writes from backend
    }
    
    // System Settings - admin only
    match /settings/{settingId} {
      allow read: if true; // Public read for things like pricing
      allow write: if isAuthenticated() && isAdmin();
    }
  }
}